from enum import Enum
import message_format

class _States(Enum):
    WaitingForMessageStart = 0,
    HeaderStarted = 1,
    ReadingHeader = 2,
    BodyStarted = 3,
    ReadingBody = 4

def handle_messages(reader, writer, message_brokers):

    state = _States.WaitingForMessageStart
    header = None
    body = None

    while True:
        char = reader.read()

        if state != _States.ReadingBody and char == message_format.MESSAGE_BODY_END:
            writer.write(message_format.UNEXPECTED_MESSAGE_END)
        else:
            match state:
                case _States.WaitingForMessageStart:
                    if (char == message_format.MESSAGE_START):
                        state = _States.HeaderStarted

                case _States.HeaderStarted:
                    if char == message_format.MESSAGE_BODY_START:
                        writer.write(message_format.MISSING_HEADER)
                        state = _States.WaitingForMessageStart
                    else:
                        header = char
                        state = _States.ReadingHeader

                case _States.ReadingHeader:
                    if char == message_format.MESSAGE_BODY_START:
                        state = _States.BodyStarted
                    else:
                        header += char

                case _States.BodyStarted:
                    body = char
                    state = _States.ReadingBody

                case _States.ReadingBody:
                    if char == message_format.MESSAGE_BODY_END:
                        if header in message_brokers:
                            result = message_format.SUCCESS if message_brokers[header](body) else message_format.FAILURE
                        else:
                            result = message_format.UNKNOWN_HEADER

                        writer.write(result)
                        state = _States.WaitingForMessageStart
                    else:
                        body += char
